<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.campmoa.mappers.IBbsMapper">

    <!-- useGeneratedKeys : 생성된 기준키를 사용하겠냐 ?   -->
    <!--    keyColume : 기준키 이름-->
    <!--    keyProperty : 키의 값-->
    <insert id="insertArticle"
            useGeneratedKeys="true"
            keyColumn="index"
            keyProperty="index"
            parameterType="com.example.campmoa.entities.bbs.ArticleEntity">
        INSERT INTO `campmoa-bbs`.`articles` (`board_value`, `user_email`, `title`, `content`, `view`, `created_at`)
        VALUES (#{boardValue}, #{userEmail}, #{title}, #{content}, #{view}, default)
    </insert>

    <!--    <insert id="insertArticleLike"-->
    <!--    parameterType="com.example.campmoa.entities.bbs.ArticleLikeEntity">-->
    <!--        INSERT INTO `campmoa-bbs`.`article_likes` (`user_email`, `article_index`, `created_at`)-->
    <!--        VALUES ( #{userEmail}, #{articleIndex}, #{createdAt})-->
    <!--    </insert>-->


    <select id="selectBoardIdByText"
            resultType="com.example.campmoa.entities.bbs.BoardEntity">
        SELECT `id`   AS `id`,
               `text` AS `text`
        FROM `campmoa-bbs`.`boards`
        ORDER BY `id`
    </select>

    <select id="selectBoardById"
            resultType="com.example.campmoa.entities.bbs.BoardEntity">
        SELECT `id`   AS `id`,
               `text` As `text`
        FROM `campmoa-bbs`.`boards`
        WHERE BINARY `id` = #{id}
        LIMIT 1;
    </select>

    <select id="selectArticles"
            resultType="com.example.campmoa.vos.bbs.ArticleVo">
        SELECT `articles`.`index`       AS `index`,
               `articles`.`board_value` AS `boardValue`,
               `articles`.`user_email`  AS `userEmail`,
               `articles`.`title`       AS `title`,
               `articles`.`content`     AS `content`,
               `articles`.`view`        AS `view`,
               `articles`.`created_at`  AS `createdAt`,
               `user`.`name`            AS `name`
        FROM `campmoa-bbs`.`articles`
                 LEFT JOIN `campmoa_member`.`users` AS `user` on `user`.email = `articles`.`user_email`
        ORDER BY `index` DESC
    </select>

    <select id="selectArticleByIndex"
            resultType="com.example.campmoa.vos.bbs.ArticleVo">
        SELECT `articles`.`index`                       AS `index`,
               `articles`.`board_value`                 AS `boardValue`,
               `articles`.`user_email`                  AS `userEmail`,
               `articles`.`title`                       AS `title`,
               `articles`.`content`                     AS `content`,
               `articles`.`view`                        AS `view`,
               `articles`.`created_at`                  AS `createdAt`,
               `user`.`name`                            AS `name`,
               COUNT(`aLikedCount`.`article_index`)     AS `articleLikedCount`,
               COUNT(`articleLike`.`article_index`) > 0 AS `articleLiked`
        FROM `campmoa-bbs`.`articles`
                 LEFT JOIN `campmoa_member`.`users` AS `user`
                           ON `user`.email = `articles`.`user_email`
                 LEFT JOIN `campmoa-bbs`.`article_likes` AS `aLikedCount`
                           ON `articles`.`index` = `aLikedCount`.`article_index`
                 LEFT JOIN `campmoa-bbs`.`article_likes` AS `articleLike`
                           ON `articles`.`index` = `articleLike`.`article_index`
        WHERE `articles`.`index` = #{index}
        GROUP BY `articles`.`index`
        LIMIT 1
    </select>


    <update id="updateArticle"
            parameterType="com.example.campmoa.entities.bbs.ArticleEntity">
        UPDATE `campmoa-bbs`.`articles`
        SET `board_value` = #{boardValue},
            `user_email`  = #{userEmail},
            `title`       = #{title},
            `content`     = #{content},
            `view`        = #{view},
            `created_at`  = #{createdAt}
        WHERE `index` = #{index}
        LIMIT 1
    </update>

    <!--  좋아요 작업 구현부.  -->
    <select id="selectLikeInfo" parameterType="com.example.campmoa.entities.bbs.ArticleLikeEntity" resultType="_int">
        SELECT COUNT(*)
        FROM `campmoa-bbs`.`article_likes`
        WHERE `article_index` = #{aid}
    </select>


    <insert id="insertArticleLike">
        INSERT INTO `campmoa-bbs`.`article_likes` (`user_email`, `article_index`)
        VALUES (#{userEmail}, #{index})
    </insert>

    <delete id="deleteArticleLike">
        DELETE
        FROM `campmoa-bbs`.`article_likes`
        WHERE `user_email` = #{userEmail}
          AND `article_index` = #{index}
    </delete>


    <select id="selectArticleLike"
            resultType="com.example.campmoa.entities.bbs.ArticleLikeEntity">
        SELECT `user_email`    AS `userEmail`,
               `article_index` AS `articleIndex`,
               `created_at`    AS `createdAt`
        FROM `campmoa-bbs`.`article_likes`
        WHERE `article_index` = #{index}
    </select>


    <select id="selectArticleCount"
            resultType="com.example.campmoa.vos.bbs.ArticleVo">
        SELECT `index` AS `index`,
        `board_value` AS `boardValue`,
        `user_email` AS `userEamil`,
        `title` AS `title`,
        `content` AS `content`,
        `view` AS `view`,
        `created_at` AS `createdAt`,
        `users`.`name` AS `userName`
        FROM `campmoa-bbs`.`articles`
        LEFT JOIN `campmoa_member`.`users` ON `articles`.`user_email` = `users`.`email`
        WHERE `board_value` = #{boardId}
        <if test="criterion != null and criterion.equals('title')">
            AND REPLACE(`articles`.`title`,' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''),'%')
        </if>
        <if test="criterion != null and criterion.equals('all')">
            AND REPLACE(`articles`.`title`,' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''),'%')
            OR REPLACE(`articles`.`content`,' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''),'%')
        </if>
        <if test="criterion != null and criterion.equals('name')">
            AND BINARY `users`.`name` = #{keyword}
        </if>
        GROUP BY `articles`.`index`
        ORDER BY `articles`.`index` desc
        LIMIT #{limit} OFFSET #{offset};
    </select>


    <!--  페이징 처리 및 검색 기능 메서드-->
    <select id="searchArticles" resultType="com.example.campmoa.vos.bbs.ArticleVo">
        SELECT * FROM `campmoa-bbs`.`articles`
        LEFT JOIN `campmoa_member`.`users` ON articles.user_email = users.email
        WHERE `board_value` = #{boardId}
        <if test="criterion !=null and criterion.equals('all')">
            AND (`title` LIKE CONCAT('%',#{keyword},'%') OR `users`.`name` LIKE CONCAT('%',#{keyword},'%'))
        </if>
        <if test="criterion !=null and criterion.equals('title')">
            AND `title` LIKE CONCAT('%',#{keyword},'%')
        </if>
        <if test="criterion != null and criterion.equals('name')">
            AND `users`.`name` LIKE CONCAT('%',#{keyword},'%')
        </if>
        ORDER BY `articles`.`index` desc
        LIMIT ${offset}, ${limit}
    </select>


    <!--    댓글 달기 =================-->
    <select id="selectParenComments"
            parameterType="com.example.campmoa.entities.bbs.CommentEntity">
        SELECT comment_index    AS `commentIndex`,
               comment_group    AS `commentGroup`,
               comment_sequence AS `commentSequence`,
               comment_level    AS `commentLevel`,
               user_email       AS `userEmail`,
               article_index    AS `articleIndex`,
               content          AS `content`,
               written_on       AS `writtenOn`
        FROM `campmoa-bbs`.comments
        WHERE `comment_index` = #{commentIndex}
        ORDER BY `comment_index` desc
    </select>

    <update id="replySequence"
            parameterType="com.example.campmoa.entities.bbs.CommentEntity">
        UPDATE `campmoa-bbs`.`comments`
        SET `comment_sequence` = `comments`.`comment_sequence` + 1
        WHERE comment_group = #{commentGroup}
          AND `comment_sequence` > #{commentSequence}
    </update>

    <!--  댓글 달기 & 대댓글이나 댓글 의 답글을 다시 insert 경우의 <insert>   -->
    <insert id="commentInsert"
            parameterType="com.example.campmoa.entities.bbs.CommentEntity">
        <selectKey keyProperty="commentIndex, commentGroup"
                   resultType="com.example.campmoa.entities.bbs.CommentEntity"
                   order="BEFORE">
            SELECT IFNULL(max(`comment_index`)+1, 1) AS `commentIndex`,
            IFNULL(max(`comment_group`)+1, 0) AS `commentGroup`
            FROM `campmoa-bbs`.`comments`
        </selectKey>
        INSERT INTO `campmoa-bbs`.`comments` (`comment_index`, `comment_group`, `user_email`, `article_index`,
        `content`)
        VALUES ( #{commentIndex}, #{commentGroup}, #{userEmail}, #{articleIndex}, #{content} )
    </insert>

    <insert id="replayInsert"
            parameterType="com.example.campmoa.entities.bbs.CommentEntity">
        <selectKey keyProperty="commentIndex"
                   resultType="com.example.campmoa.entities.bbs.CommentEntity"
                   order="BEFORE">
            SELECT IFNULL(max(`comment_index`)+1, 1) AS `commentIndex`
            FROM `campmoa-bbs`.`comments`
        </selectKey>
        INSERT INTO `campmoa-bbs`.`comments` (`comment_group`, `comment_sequence`, `comment_level`, `user_email`,
        `article_index`, `content`, `written_on`) VALUES ( #{commentGroup}, #{commentSequence}, #{commentLevel},
        #{userEmail}, #{articleIndex}, #{content}, #{writtenOn})
    </insert>

    <select id="AllComment"
            parameterType="com.example.campmoa.entities.bbs.CommentEntity"
            resultType="com.example.campmoa.entities.bbs.CommentEntity">
        SELECT comment_index    AS `commentIndex`,
               comment_group    AS `commentGroup`,
               comment_sequence AS `commentSequence`,
               comment_level    AS `commentLevel`,
               user_email       AS `userEmail`,
               article_index    AS `articleIndex`,
               content          AS `content`,
               written_on       AS `writtenOn`
        FROM `campmoa-bbs`.`comments`
        WHERE `article_index` = #{articleIndex}
        ORDER BY `comment_group`
    </select>

    <delete id="deleteArticleById"
            parameterType="com.example.campmoa.entities.bbs.ArticleEntity">
        DELETE
        FROM `campmoa-bbs`.`articles`
        WHERE `index` = #{aid}
    </delete>

</mapper>